name: Build goom-lib only
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        config:
          - {
            name: 'Windows 2022 MSVC - Release',
            os: 'windows-2022',
            cc: 'cl',
            cxx: 'cl',
            build_type: 'Release',
          }
          - {
            name: 'Ubuntu Clang - RelWithDebInfo',
            os: 'ubuntu-24.04',
            cc: 'clang-${{ vars.CLANG_VER }}',
            cxx: 'clang++-${{ vars.CLANG_VER }}',
            build_type: 'RelWithDebInfo',
          }
          - {
            name: 'Ubuntu Clang - Release',
            os: 'ubuntu-24.04',
            cc: 'clang-${{ vars.CLANG_VER }}',
            cxx: 'clang++-${{ vars.CLANG_VER }}',
            build_type: 'Release',
          }

    env:
      GOOM_LIBS_DIR: depends/goom-libs
      BUILD_DIR: build-${{ matrix.config.cc }}-${{ matrix.config.build_type }}-${{ github.ref_name }}

    steps:
      - name: Print env
        shell: bash
        run: |
          echo "cc:                ${{ matrix.config.cc }}"
          echo "cxx:               ${{ matrix.config.cxx }}"
          echo "runner.os:         ${{ runner.os }}"
          echo "github.ref:        ${{ github.ref }}"
          echo "github.ref_name:   ${{ github.ref_name }}"
          echo "github.event_name: ${{ github.event_name }}"
          echo "github.event_path: ${{ github.event_path }}"
          echo "github.workflow:   ${{ github.workflow }}"
          echo "github.workspace:  ${{ github.workspace }}"
          echo "os:                ${{ matrix.config.os }}"
          echo "GOOM_LIBS_DIR:     ${{ env.GOOM_LIBS_DIR }}"
          echo "BUILD_DIR:         ${{ env.BUILD_DIR }}"

      - name: Clone this Goom++ Repo
        uses: actions/checkout@v4
        with:
          submodules: true
          path: ''

      - name: Install Clang-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          sudo apt-get update
          sudo bash docker-toolchains/llvm.sh ${{ vars.CLANG_VER }}

      # Clang-19 found a bug in gcc 14 libstdc++:
      #   "This change uncovered a bug in libstdc++ 14.1.0 which may cause compile
      #    failures on systems using that version of libstdc++ and Clang 19..."
      # So make sure gcc-13 is installed, then remove gcc-14.
      - name: Install gcc-13
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 13
          platform: x64

      - name: Remove gcc-14
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          sudo apt-get update
          sudo apt-get remove gcc-14
          sudo apt-get autoclean && sudo apt-get autoremove --purge

      - name: Install clang-format-${{ vars.CLANG_FORMAT_VER }} and clang-tidy-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          sudo apt-get update
          sudo apt-get install -y python3
          sudo apt-get install -y clang-format-${{ vars.CLANG_FORMAT_VER }}
          sudo apt-get install -y clang-tidy-${{ vars.CLANG_VER }}

          python3 --version
          clang-format-${{ vars.CLANG_FORMAT_VER }} --version
          clang-tidy-${{ vars.CLANG_VER }} --version

      - name: Install latest cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.x'

      - name: Install latest ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: '1.11.1'

      - name: Configure Developer Command Prompt for Microsoft Visual C++.
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Run clang-format-${{ vars.CLANG_FORMAT_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        shell: bash
        run: |
          python3 scripts/run-clang-format.py --clang-format-executable "clang-format-${{ vars.CLANG_FORMAT_VER }}" \
                                              -i -r \
                                              -e "*particles/src/glm" \
                                              -e "*lsys/src/*.c" -e "*lsys/src/lexdefs.h" -e "*lsys/src/lsys.tab.h" \
                                              -e "*build-*" -e "*vivid*" -e "*bezier" -e "*perlin_noise*" -e "*magic_enum*" \
                                              "${PWD}"
          if [[ "$(git diff --name-only)" != "" ]]; then
            echo "ERROR: clang-format problem."
            echo
            clang-format-${{ vars.CLANG_FORMAT_VER }} --version
            echo
            git diff --name-only
            echo
            exit 1
          fi
          echo "Success: Everything is clang-formatted correctly."

      - name: Configure
        shell: bash
        run: |
          mkdir ${{ env.GOOM_LIBS_DIR }}/${{ env.BUILD_DIR }}
          cd ${{ env.GOOM_LIBS_DIR }}/${{ env.BUILD_DIR }}
          CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake \
                                                                  -G Ninja \
                                                                  -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
                                                                  -DENABLE_TESTING=1 \
                                                                  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                                                                  ..

      - name: Build
        shell: bash
        run: |
          cd ${{ env.GOOM_LIBS_DIR }}
          CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake \
                                                                  --build ${{ env.BUILD_DIR }} \
                                                                  --config ${{ matrix.config.build_type }}

      - name: Run clang-tidy-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        shell: bash
        run: |
          cd ${{ env.GOOM_LIBS_DIR }}
          run-clang-tidy-${{ vars.CLANG_VER}} -j $(getconf _NPROCESSORS_ONLN) \
                                              -header-filter='^((?!catch2).)*$' \
                                              -p ${{ env.BUILD_DIR }} \
                                              "${PWD}/src"

      - name: Run Goom++ Test Harness for ${{ runner.os }}
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          cd ${{ env.GOOM_LIBS_DIR }}

          ${{ env.BUILD_DIR }}/src/tests/goom_lib_tests -d yes

      - name: Run Goom++ Test Harness for  ${{ runner.os }}
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          cd ${{ env.GOOM_LIBS_DIR }}

          ${{ env.BUILD_DIR }}/src/tests/goom_lib_tests.exe -d yes
