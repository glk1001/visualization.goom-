name: Build goom-lib only
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  info:
    runs-on: ubuntu-latest

    steps:
      - name: Print global context
        shell: bash
        run: |
          echo "github.ref:          ${{ github.ref }}"
          echo "github.ref_name:     ${{ github.ref_name }}"
          echo "github.event_name:   ${{ github.event_name }}"
          echo "github.event_path:   ${{ github.event_path }}"
          echo "github.workflow_sha: ${{ github.workflow_sha }}"
          echo "github.workflow:     ${{ github.workflow }}"
          echo "github.workspace:    ${{ github.workspace }}"
          echo "VIS_GOOM_ROOT_DIR:   ${{ vars.VIS_GOOM_ROOT_DIR }}"
          echo "CLANG_VER:           ${{ vars.CLANG_VER }}"
          echo "CLANG_FORMAT_VER:    ${{ vars.CLANG_FORMAT_VER }}"
          echo "GCC_VER:             ${{ vars.GCC_VER }}"

  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        config:
          - {
            name: 'Windows 2022 MSVC - RelWithDebInfo',
            os: 'windows-2022',
            cc: 'cl',
            cxx: 'cl',
            build_type: 'RelWithDebInfo',
          }
          - {
            name: 'Ubuntu Clang - RelWithDebInfo',
            os: 'ubuntu-24.04',
            cc: 'clang-${{ vars.CLANG_VER }}',
            cxx: 'clang++-${{ vars.CLANG_VER }}',
            build_type: 'RelWithDebInfo',
          }
          - {
            name: 'Ubuntu Clang - Release',
            os: 'ubuntu-24.04',
            cc: 'clang-${{ vars.CLANG_VER }}',
            cxx: 'clang++-${{ vars.CLANG_VER }}',
            build_type: 'Release',
          }

    env:
      VIS_GOOM_PATH: '${{ github.workspace }}/${{ vars.VIS_GOOM_ROOT_DIR }}'
      GOOM_LIBS_DIR: 'depends/goom-libs'
      BUILD_PATH: 'build-${{ matrix.config.cc }}-${{ matrix.config.build_type }}-${{ github.ref_name }}'

    steps:
      - name: Print env
        shell: bash
        run: |
          echo "runner.os:      ${{ runner.os }}"
          echo "runner.arch:    ${{ runner.arch }}"
          echo "cc:             ${{ matrix.config.cc }}"
          echo "cxx:            ${{ matrix.config.cxx }}"
          echo "os:             ${{ matrix.config.os }}"
          echo "VIS_GOOM_PATH:  ${{ env.VIS_GOOM_PATH }}"
          echo "GOOM_LIBS_DIR:  ${{ env.GOOM_LIBS_DIR }}"
          echo "BUILD_PATH:     ${{ env.BUILD_PATH }}"

      - name: Clone this Goom++ Repo
        uses: actions/checkout@v4
        with:
          submodules: true
          path: '${{ env.VIS_GOOM_PATH }}'

      - name: Install Clang-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          cd ${{ env.VIS_GOOM_PATH }}
          echo "PWD = \"${PWD}\"."

          sudo apt-get update
          sudo bash docker-toolchains/llvm.sh ${{ vars.CLANG_VER }}

      - name: Install gcc-${{ vars.GCC_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ vars.GCC_VER }}
          platform: x64

      # Clang-19 found a bug in gcc 14 libstdc++:
      #   "This change uncovered a bug in libstdc++ 14.1.0 which may cause compile
      #    failures on systems using that version of libstdc++ and Clang 19..."
      # So copy in a fixed 'unicode.h'.
      - name: Fix gcc 14.1 unicode.h
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          cd ${{ env.VIS_GOOM_PATH }}
          echo "PWD = \"${PWD}\"."

          sudo cp "docker-toolchains/unicode.h" "/usr/include/c++/14/bits/unicode.h"

      - name: Install clang-format-${{ vars.CLANG_FORMAT_VER }} and clang-tidy-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          sudo apt-get update
          sudo apt-get install -y python3
          sudo apt-get install -y clang-format-${{ vars.CLANG_FORMAT_VER }}
          sudo apt-get install -y clang-tidy-${{ vars.CLANG_VER }}

          python3 --version
          clang-format-${{ vars.CLANG_FORMAT_VER }} --version
          clang-tidy-${{ vars.CLANG_VER }} --version

      - name: Install latest cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.x'

      - name: Install latest ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: '1.11.1'

      - name: Configure Developer Command Prompt for Microsoft Visual C++.
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Run clang-format-${{ vars.CLANG_FORMAT_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}
          echo "PWD = \"${PWD}\"."

          python3 scripts/run-clang-format.py --clang-format-executable "clang-format-${{ vars.CLANG_FORMAT_VER }}" \
                                              -i -r \
                                              -e "*particles/src/glm" \
                                              -e "*docker-toolchains/unicode.h" \
                                              -e "*lsys/src/*.c" -e "*lsys/src/lexdefs.h" -e "*lsys/src/lsys.tab.h" \
                                              -e "*build-*" -e "*vivid*" -e "*bezier" -e "*perlin_noise*" -e "*magic_enum*" \
                                              "${PWD}"
          if [[ "$(git diff --name-only)" != "" ]]; then
            echo "ERROR: clang-format problem."
            echo
            clang-format-${{ vars.CLANG_FORMAT_VER }} --version
            echo
            git diff --name-only
            echo
            exit 1
          fi
          echo "Success: Everything is clang-formatted correctly."

      - name: Configure
        shell: bash
        run: |
          mkdir ${{ vars.VIS_GOOM_ROOT_DIR }}/${{ env.GOOM_LIBS_DIR }}/${{ env.BUILD_PATH }}
          cd ${{ vars.VIS_GOOM_ROOT_DIR }}/${{ env.GOOM_LIBS_DIR }}/${{ env.BUILD_PATH }}
          echo "PWD = \"${PWD}\"."

          CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake \
                                                                  -G Ninja \
                                                                  -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
                                                                  -DENABLE_TESTING=1 \
                                                                  -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
                                                                  ..

      - name: Build
        shell: bash
        run: |
          cd ${{ vars.VIS_GOOM_ROOT_DIR }}/${{ env.GOOM_LIBS_DIR }}
          echo "PWD = \"${PWD}\"."

          CC=${{ matrix.config.cc }} CXX=${{ matrix.config.cxx }} cmake \
                                                                  --build ${{ env.BUILD_PATH }} \
                                                                  --config ${{ matrix.config.build_type }}

      - name: Run clang-tidy-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}/${{ env.GOOM_LIBS_DIR }}
          echo "PWD = \"${PWD}\"."
          
          run-clang-tidy-${{ vars.CLANG_VER}} -j $(getconf _NPROCESSORS_ONLN) \
                                              -header-filter='^((?!catch2).)*$' \
                                              -p ${{ env.BUILD_PATH }} \
                                              "${PWD}/src"

      - name: Run Goom++ Test Harness for ${{ runner.os }}
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}/${{ env.GOOM_LIBS_DIR }}
          echo "PWD = \"${PWD}\"."

          TEST_EXE="${{ env.BUILD_PATH }}/src/tests/goom_lib_tests"

          if [[ ! -f "${TEST_EXE}" ]]; then
            echo "Could not find test harness exe \"${TEST_EXE}\"."
          fi

          echo "About to run test harness \"${TEST_EXE}\"..."
          "${TEST_EXE}" -d yes

      - name: Run Goom++ Test Harness for  ${{ runner.os }}
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          $env:TEST_EXE="${{ env.BUILD_PATH }}/src/tests/goom_lib_tests.exe"

          echo "About to run test harness '$env:TEST_EXE'..."
          echo "NOT RUNNING! TODO(glk): Windows here, segfaults test harness even though locally it runs OK."
#          "$env:TEST_EXE" -d yes
