name: Build kodi goom-pp using 'cmake'
on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  info:
    runs-on: ubuntu-latest

    steps:
      - name: Print global context
        shell: bash
        run: |
          echo "github.ref:             ${{ github.ref }}"
          echo "github.ref_name:        ${{ github.ref_name }}"
          echo "github.event_name:      ${{ github.event_name }}"
          echo "github.event_path:      ${{ github.event_path }}"
          echo "github.workflow_sha:    ${{ github.workflow_sha }}"
          echo "github.workflow:        ${{ github.workflow }}"
          echo "github.workspace:       ${{ github.workspace }}"
          echo "KODI_ROOT_DIR:          ${{ vars.KODI_ROOT_DIR }}"
          echo "KODI_BRANCH:            ${{ vars.KODI_BRANCH }}"
          echo "VIS_GOOM_ROOT_DIR:      ${{ vars.VIS_GOOM_ROOT_DIR }}"
          echo "CLANG_VER:              ${{ vars.CLANG_VER }}"
          echo "CLANG_FORMAT_VER:       ${{ vars.CLANG_FORMAT_VER }}"
          echo "GCC_VER:                ${{ vars.GCC_VER }}"

  build:
    needs: info
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      fail-fast: true
      max-parallel: 2
      matrix:
        config:
          - {
            name: 'Ubuntu Clang - RelWithDebInfo',
            os: 'ubuntu-24.04',
            cc: 'clang-${{ vars.CLANG_VER }}',
            cxx: 'clang++-${{ vars.CLANG_VER }}',
            build_type: 'RelWithDebInfo',
          }
          - {
            name: 'Ubuntu Clang - Release',
            os: 'ubuntu-24.04',
            cc: 'clang-${{ vars.CLANG_VER }}',
            cxx: 'clang++-${{ vars.CLANG_VER }}',
            build_type: 'Release',
          }

    env:
      KODI_PATH: '${{ github.workspace }}/${{ vars.KODI_ROOT_DIR }}'
      VIS_GOOM_PATH: '${{ github.workspace }}/${{ vars.VIS_GOOM_ROOT_DIR }}'
      GOOM_LIBS_DIR: 'depends/goom-libs'
      ARCHIVE_NAME: 'kodi-${{ vars.KODI_BRANCH }}-goom++-${{ matrix.config.os }}-${{ matrix.config.cc }}-${{ matrix.config.build_type }}-${{ github.ref_name }}'
      ARTIFACTS_PATH: '${{ github.workspace }}/artifacts-${{ matrix.config.cc }}-${{ matrix.config.build_type }}-${{ github.ref_name }}/${{ vars.VIS_GOOM_ROOT_DIR }}'
      BUILD_PATH: 'build-${{ matrix.config.cc }}-${{ matrix.config.build_type }}-${{ github.ref_name }}'

    steps:
      - name: Clone this Goom++ Repo
        uses: actions/checkout@v4
        with:
          submodules: true
          path: '${{ env.VIS_GOOM_PATH }}'

      - name: Clone the Kodi Repo
        uses: actions/checkout@v4
        with:
          repository: 'xbmc/xbmc'
          ref: ${{ vars.KODI_BRANCH }}
          path: ${{ env.KODI_PATH }}

      - name: Print env
        shell: bash
        run: |
          echo "runner.os:              ${{ runner.os }}"
          echo "runner.arch:            ${{ runner.arch }}"
          echo "cc:                     ${{ matrix.config.cc }}"
          echo "cxx:                    ${{ matrix.config.cxx }}"
          echo "os:                     ${{ matrix.config.os }}"
          echo "VIS_GOOM_PATH:          ${{ env.VIS_GOOM_PATH }}"
          echo "GOOM_LIBS_DIR:          ${{ env.GOOM_LIBS_DIR }}"
          echo "KODI_PATH:              ${{ env.KODI_PATH }}"
          echo "BUILD_PATH:             ${{ env.BUILD_PATH }}"
          echo "ARCHIVE_NAME:           ${{ env.ARCHIVE_NAME }}"
          echo "ARTIFACTS_PATH:         ${{ env.ARTIFACTS_PATH }}"

      - name: Install Clang-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          sudo apt-get update
          sudo bash docker-toolchains/llvm.sh ${{ vars.CLANG_VER }}

      # Clang-19 found a bug in gcc 14 libstdc++:
      #   "This change uncovered a bug in libstdc++ 14.1.0 which may cause compile
      #    failures on systems using that version of libstdc++ and Clang 19..."
      # So make sure gcc-13 is installed, then remove gcc-14.
      - name: Install gcc-13
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 13
          platform: x64

      - name: Remove gcc-14
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          sudo apt-get update
          sudo apt-get remove gcc-14
          sudo apt-get autoclean && sudo apt-get autoremove --purge

      - name: Install clang-format-${{ vars.CLANG_FORMAT_VER }} and clang-tidy-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        run: |
          sudo apt-get update
          sudo apt-get install -y python3
          sudo apt-get install -y clang-format-${{ vars.CLANG_FORMAT_VER }}
          sudo apt-get install -y clang-tidy-${{ vars.CLANG_VER }}

          python3 --version
          clang-format-${{ vars.CLANG_FORMAT_VER }} --version
          clang-tidy-${{ vars.CLANG_VER }} --version

      - name: Install Necessary Ubuntu Packages
        if: ${{ startsWith(matrix.config.name, 'Ubuntu') }}
        run: |
          sudo apt-get update
          sudo apt-get install -y mesa-common-dev

      - name: Install latest cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.29.x'

      - name: Install latest ninja
        uses: seanmiddleditch/gha-setup-ninja@master
        with:
          version: '1.11.1'

      - name: Run clang-format-${{ vars.CLANG_FORMAT_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          python3 scripts/run-clang-format.py --clang-format-executable "clang-format-${{ vars.CLANG_FORMAT_VER }}" \
                                              -i -r \
                                              -e "*particles/src/glm" \
                                              -e "*lsys/src/*.c" -e "*lsys/src/lexdefs.h" -e "*lsys/src/lsys.tab.h" \
                                              -e "*build-*" -e "*vivid*" -e "*bezier" -e "*perlin_noise*" -e "*magic_enum*" \
                                              "${PWD}"
          if [[ "$(git diff --name-only)" != "" ]]; then
            echo "ERROR: clang-format problem."
            echo
            clang-format-${{ vars.CLANG_FORMAT_VER }} --version
            echo
            git diff --name-only
            echo
            exit 1
          fi
          echo "Success: Everything is clang-formatted correctly."

      - name: Configure Goom++ for ${{ runner.os }}
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          export CCACHE_DIR=${{ runner.temp }}
          bash scripts/goom-configure.sh -c ${{ matrix.config.cc }} \
                                         --build-type ${{ matrix.config.build_type }} \
                                         --suffix ${{ github.ref_name }}

      - name: Build Goom++ for ${{ runner.os }}
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          export CCACHE_DIR=${{ runner.temp }}
          bash scripts/goom-build.sh -c ${{ matrix.config.cc }} --build-type ${{ matrix.config.build_type }} --suffix ${{ github.ref_name }}

          mkdir -p ${{ env.ARTIFACTS_PATH }}
          cp -pr ${{ env.BUILD_PATH }}/kodi-vis-goom-addon/* ${{ env.ARTIFACTS_PATH }}/

          echo "Artifacts contents (${{ env.ARTIFACTS_PATH }}/):"
          ls ${{ env.ARTIFACTS_PATH }}/

      - name: Run clang-tidy-${{ vars.CLANG_VER }}
        if: startsWith(matrix.config.name, 'Ubuntu Clang')
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          run-clang-tidy-${{ vars.CLANG_VER }} -j $(getconf _NPROCESSORS_ONLN) \
                                               -header-filter='^((?!catch2).)*$' \
                                               -p ${{ env.BUILD_PATH }} \
                                               "${PWD}/src" \
                                               "${PWD}/depends/goom-libs/src"

          if [[ $? != 0 ]]; then
            echo "ERROR: clang-tidy problem."
            echo
            clang-tidy-${{ vars.CLANG_VER }} --version
            echo
            exit 1
          fi
          echo "Success: Everything is 'clang-tidy' correct."

      - name: Configure Goom++ for Windows
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          ./scripts/goom-configure.bat ${{ matrix.config.build_type }} ${{ github.ref_name }}

      - name: Build Goom++ for Windows
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          ./scripts/goom-build.bat ${{ matrix.config.build_type }} ${{ github.ref_name }}

          New-Item -Type Directory -Path ${{ env.ARTIFACTS_PATH }}
          copy-item -path ${{ env.BUILD_DIR }}/kodi-vis-goom-addon/* ${{ env.ARTIFACTS_PATH }}/ -recurse

          echo "Artifacts contents:"
          ls ${{ env.ARTIFACTS_PATH }}/

      - name: Run Goom++ Test Harness for ${{ runner.os }}
        if: ${{ runner.os != 'Windows' }}
        shell: bash
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          ${{ env.BUILD_PATH }}/${{ env.GOOM_LIBS_DIR }}/src/tests/goom_lib_tests -d yes

      - name: Run Goom++ Test Harness for  ${{ runner.os }}
        if: ${{ runner.os == 'Windows' }}
        shell: powershell
        run: |
          cd ${{ env.VIS_GOOM_PATH }}

          ${{ env.BUILD_PATH }}/${{ env.GOOM_LIBS_DIR }}/src/tests/goom_lib_tests.exe -d yes

      - name: Archive Goom++ Artifacts
        if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARTIFACTS_PATH }}
          retention-days: 1

  deploy:
    needs: build
    name: Copy build zips to deploy repo
    runs-on: ubuntu-latest

    steps:
      - if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/download-artifact@v3
        with:
          name: 'kodi-${{ vars.KODI_BRANCH }}-goom++-ubuntu-latest-clang-${{ vars.CLANG_VER }}-Release-master'
          path: 'artifacts/linux/${{ vars.VIS_GOOM_ROOT_DIR }}'

      - if: ${{ github.event_name == 'workflow_dispatch' }}
        uses: actions/download-artifact@v3
        with:
          name: 'kodi-${{ vars.KODI_BRANCH }}-goom++-windows-latest-cl-Release-master'
          path: 'artifacts/windows/${{ vars.VIS_GOOM_ROOT_DIR }}'

      - name: Zip and copy artifacts to deployment repo
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          declare -r UPPER_KODI_BRANCH="${{ vars.KODI_BRANCH }}"
          declare -r LOWER_KODI_BRANCH="${UPPER_KODI_BRANCH,,}"
          declare -r LINUX_ZIP_NAME=${{ vars.VIS_GOOM_ROOT_DIR }}-${LOWER_KODI_BRANCH}-linux-x86_64.zip
          declare -r WINDOWS_ZIP_NAME=${{ vars.VIS_GOOM_ROOT_DIR }}-${LOWER_KODI_BRANCH}-windows-x86_64.zip
          
          cd artifacts/linux
          zip -m -r "${LINUX_ZIP_NAME}" '${{ vars.VIS_GOOM_ROOT_DIR }}/'
          cd -
          
          cd artifacts/windows
          zip -m -r "${WINDOWS_ZIP_NAME}" '${{ vars.VIS_GOOM_ROOT_DIR }}/'
          cd -
          
          git clone https://.:${{ secrets.ACTIONS_GITHUB }}@github.com/glk1001/glk1001.github.io target
          cd target
          git switch master
          git reset --hard HEAD~1
          
          git config --global user.email 'gregg.kay@gmail.com'
          git config --global user.name '${{ github.repository_owner }}'
          
          mv "../artifacts/linux/${LINUX_ZIP_NAME}" .
          mv "../artifacts/windows/${WINDOWS_ZIP_NAME}" .
          
          git add "${LINUX_ZIP_NAME}"
          git add "${WINDOWS_ZIP_NAME}"
          
          git commit -m "Latest Goom++ Build"
          git push -f
