// IMPORTANT - THIS CODE IS GENERATED BY:
//
//  'create_colormaps.py'
//
// DO NOT EDIT!!

module;

#include "vivid/types.h"

#include <span>

export module Goom.Color.ColorData.ColorDataMaps;

import Goom.Color.ColorData.ColorMapEnums;

export namespace GOOM::COLOR::COLOR_DATA
{

// Array of raw maps matching elements of enum 'ColorMapName'.
struct ColorNamePair
{
  ColorMapName colorMap{};
  std::span<const vivid::srgb_t> vivArray;
};

auto GetAllMapArrays() noexcept -> std::span<const ColorNamePair>;

auto GetPercUnifSequentialMaps() noexcept -> std::span<const ColorMapName>;
auto GetSequentialMaps() noexcept -> std::span<const ColorMapName>;
auto GetSequential2Maps() noexcept -> std::span<const ColorMapName>;
auto GetDivergingMaps() noexcept -> std::span<const ColorMapName>;
auto GetDivergingBlackMaps() noexcept -> std::span<const ColorMapName>;
auto GetQualitativeMaps() noexcept -> std::span<const ColorMapName>;
auto GetMiscMaps() noexcept -> std::span<const ColorMapName>;
auto GetCyclicMaps() noexcept -> std::span<const ColorMapName>;
auto GetPercUnifSequentialSlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetSequentialSlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetSequential2SlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetDivergingSlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetDivergingBlackSlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetQualitativeSlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetMiscSlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetCyclicSlimMaps() noexcept -> std::span<const ColorMapName>;
auto GetAllMaps() noexcept -> std::span<const ColorMapName>;

} // namespace GOOM::COLOR::COLOR_DATA
